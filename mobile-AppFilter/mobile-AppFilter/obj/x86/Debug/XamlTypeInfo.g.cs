//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace mobile_AppFilter
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace mobile_AppFilter.mobile_AppFilter_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[30];
            _typeNameTable[0] = "mobile_AppFilter.Views.MainPage";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[3] = "mobile_AppFilter.Views.MapPage";
            _typeNameTable[4] = "Double";
            _typeNameTable[5] = "Windows.Devices.Geolocation.Geopoint";
            _typeNameTable[6] = "Object";
            _typeNameTable[7] = "mobile_AppFilter.Views.MasterDetailDetailControl";
            _typeNameTable[8] = "mobile_AppFilter.Models.SampleModel";
            _typeNameTable[9] = "mobile_AppFilter.Views.MasterDetailDetailPage";
            _typeNameTable[10] = "mobile_AppFilter.Views.MasterDetailPage";
            _typeNameTable[11] = "System.Collections.ObjectModel.ObservableCollection`1<mobile_AppFilter.Models.SampleModel>";
            _typeNameTable[12] = "System.Collections.ObjectModel.Collection`1<mobile_AppFilter.Models.SampleModel>";
            _typeNameTable[13] = "String";
            _typeNameTable[14] = "Windows.UI.Xaml.Controls.Symbol";
            _typeNameTable[15] = "Char";
            _typeNameTable[16] = "System.ValueType";
            _typeNameTable[17] = "mobile_AppFilter.Views.SettingsPage";
            _typeNameTable[18] = "Boolean";
            _typeNameTable[19] = "mobile_AppFilter.Views.ShellPage";
            _typeNameTable[20] = "Windows.UI.Xaml.Controls.SplitViewDisplayMode";
            _typeNameTable[21] = "System.Collections.ObjectModel.ObservableCollection`1<mobile_AppFilter.Views.ShellNavigationItem>";
            _typeNameTable[22] = "System.Collections.ObjectModel.Collection`1<mobile_AppFilter.Views.ShellNavigationItem>";
            _typeNameTable[23] = "mobile_AppFilter.Views.ShellNavigationItem";
            _typeNameTable[24] = "Windows.UI.Xaml.Visibility";
            _typeNameTable[25] = "System.Type";
            _typeNameTable[26] = "Windows.UI.Xaml.Media.SolidColorBrush";
            _typeNameTable[27] = "mobile_AppFilter.Views.TabbedPage";
            _typeNameTable[28] = "mobile_AppFilter.Views.WebViewPage";
            _typeNameTable[29] = "System.Uri";

            _typeTable = new global::System.Type[30];
            _typeTable[0] = typeof(global::mobile_AppFilter.Views.MainPage);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[3] = typeof(global::mobile_AppFilter.Views.MapPage);
            _typeTable[4] = typeof(global::System.Double);
            _typeTable[5] = typeof(global::Windows.Devices.Geolocation.Geopoint);
            _typeTable[6] = typeof(global::System.Object);
            _typeTable[7] = typeof(global::mobile_AppFilter.Views.MasterDetailDetailControl);
            _typeTable[8] = typeof(global::mobile_AppFilter.Models.SampleModel);
            _typeTable[9] = typeof(global::mobile_AppFilter.Views.MasterDetailDetailPage);
            _typeTable[10] = typeof(global::mobile_AppFilter.Views.MasterDetailPage);
            _typeTable[11] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::mobile_AppFilter.Models.SampleModel>);
            _typeTable[12] = typeof(global::System.Collections.ObjectModel.Collection<global::mobile_AppFilter.Models.SampleModel>);
            _typeTable[13] = typeof(global::System.String);
            _typeTable[14] = typeof(global::Windows.UI.Xaml.Controls.Symbol);
            _typeTable[15] = typeof(global::System.Char);
            _typeTable[16] = typeof(global::System.ValueType);
            _typeTable[17] = typeof(global::mobile_AppFilter.Views.SettingsPage);
            _typeTable[18] = typeof(global::System.Boolean);
            _typeTable[19] = typeof(global::mobile_AppFilter.Views.ShellPage);
            _typeTable[20] = typeof(global::Windows.UI.Xaml.Controls.SplitViewDisplayMode);
            _typeTable[21] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::mobile_AppFilter.Views.ShellNavigationItem>);
            _typeTable[22] = typeof(global::System.Collections.ObjectModel.Collection<global::mobile_AppFilter.Views.ShellNavigationItem>);
            _typeTable[23] = typeof(global::mobile_AppFilter.Views.ShellNavigationItem);
            _typeTable[24] = typeof(global::Windows.UI.Xaml.Visibility);
            _typeTable[25] = typeof(global::System.Type);
            _typeTable[26] = typeof(global::Windows.UI.Xaml.Media.SolidColorBrush);
            _typeTable[27] = typeof(global::mobile_AppFilter.Views.TabbedPage);
            _typeTable[28] = typeof(global::mobile_AppFilter.Views.WebViewPage);
            _typeTable[29] = typeof(global::System.Uri);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_MainPage() { return new global::mobile_AppFilter.Views.MainPage(); }
        private object Activate_3_MapPage() { return new global::mobile_AppFilter.Views.MapPage(); }
        private object Activate_7_MasterDetailDetailControl() { return new global::mobile_AppFilter.Views.MasterDetailDetailControl(); }
        private object Activate_8_SampleModel() { return new global::mobile_AppFilter.Models.SampleModel(); }
        private object Activate_9_MasterDetailDetailPage() { return new global::mobile_AppFilter.Views.MasterDetailDetailPage(); }
        private object Activate_10_MasterDetailPage() { return new global::mobile_AppFilter.Views.MasterDetailPage(); }
        private object Activate_11_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::mobile_AppFilter.Models.SampleModel>(); }
        private object Activate_12_Collection() { return new global::System.Collections.ObjectModel.Collection<global::mobile_AppFilter.Models.SampleModel>(); }
        private object Activate_17_SettingsPage() { return new global::mobile_AppFilter.Views.SettingsPage(); }
        private object Activate_19_ShellPage() { return new global::mobile_AppFilter.Views.ShellPage(); }
        private object Activate_21_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::mobile_AppFilter.Views.ShellNavigationItem>(); }
        private object Activate_22_Collection() { return new global::System.Collections.ObjectModel.Collection<global::mobile_AppFilter.Views.ShellNavigationItem>(); }
        private object Activate_27_TabbedPage() { return new global::mobile_AppFilter.Views.TabbedPage(); }
        private object Activate_28_WebViewPage() { return new global::mobile_AppFilter.Views.WebViewPage(); }
        private void VectorAdd_11_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::mobile_AppFilter.Models.SampleModel>)instance;
            var newItem = (global::mobile_AppFilter.Models.SampleModel)item;
            collection.Add(newItem);
        }
        private void VectorAdd_12_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::mobile_AppFilter.Models.SampleModel>)instance;
            var newItem = (global::mobile_AppFilter.Models.SampleModel)item;
            collection.Add(newItem);
        }
        private void VectorAdd_21_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::mobile_AppFilter.Views.ShellNavigationItem>)instance;
            var newItem = (global::mobile_AppFilter.Views.ShellNavigationItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_22_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::mobile_AppFilter.Views.ShellNavigationItem>)instance;
            var newItem = (global::mobile_AppFilter.Views.ShellNavigationItem)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  mobile_AppFilter.Views.MainPage
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  mobile_AppFilter.Views.MapPage
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_3_MapPage;
                userType.AddMemberName("ZoomLevel");
                userType.AddMemberName("Center");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  Double
                xamlType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  Windows.Devices.Geolocation.Geopoint
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 6:   //  Object
                xamlType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  mobile_AppFilter.Views.MasterDetailDetailControl
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_7_MasterDetailDetailControl;
                userType.AddMemberName("MasterMenuItem");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  mobile_AppFilter.Models.SampleModel
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_SampleModel;
                userType.AddMemberName("Title");
                userType.AddMemberName("Description");
                userType.AddMemberName("Symbol");
                userType.AddMemberName("SymbolAsChar");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  mobile_AppFilter.Views.MasterDetailDetailPage
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_9_MasterDetailDetailPage;
                userType.AddMemberName("Item");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  mobile_AppFilter.Views.MasterDetailPage
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_10_MasterDetailPage;
                userType.AddMemberName("Selected");
                userType.AddMemberName("SampleItems");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  System.Collections.ObjectModel.ObservableCollection`1<mobile_AppFilter.Models.SampleModel>
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<mobile_AppFilter.Models.SampleModel>"));
                userType.CollectionAdd = VectorAdd_11_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 12:   //  System.Collections.ObjectModel.Collection`1<mobile_AppFilter.Models.SampleModel>
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_12_Collection;
                userType.CollectionAdd = VectorAdd_12_Collection;
                xamlType = userType;
                break;

            case 13:   //  String
                xamlType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Windows.UI.Xaml.Controls.Symbol
                xamlType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Char
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 16:   //  System.ValueType
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 17:   //  mobile_AppFilter.Views.SettingsPage
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_17_SettingsPage;
                userType.AddMemberName("IsLightThemeEnabled");
                userType.AddMemberName("AppDescription");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  Boolean
                xamlType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  mobile_AppFilter.Views.ShellPage
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_19_ShellPage;
                userType.AddMemberName("IsPaneOpen");
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("PrimaryItems");
                userType.AddMemberName("SecondaryItems");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  Windows.UI.Xaml.Controls.SplitViewDisplayMode
                xamlType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  System.Collections.ObjectModel.ObservableCollection`1<mobile_AppFilter.Views.ShellNavigationItem>
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<mobile_AppFilter.Views.ShellNavigationItem>"));
                userType.CollectionAdd = VectorAdd_21_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  System.Collections.ObjectModel.Collection`1<mobile_AppFilter.Views.ShellNavigationItem>
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_22_Collection;
                userType.CollectionAdd = VectorAdd_22_Collection;
                xamlType = userType;
                break;

            case 23:   //  mobile_AppFilter.Views.ShellNavigationItem
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("SelectedVis");
                userType.AddMemberName("Label");
                userType.AddMemberName("Symbol");
                userType.AddMemberName("SymbolAsChar");
                userType.AddMemberName("PageType");
                userType.AddMemberName("IsSelected");
                userType.AddMemberName("SelectedForeground");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  Windows.UI.Xaml.Visibility
                xamlType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  System.Type
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 26:   //  Windows.UI.Xaml.Media.SolidColorBrush
                xamlType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  mobile_AppFilter.Views.TabbedPage
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_27_TabbedPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  mobile_AppFilter.Views.WebViewPage
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_28_WebViewPage;
                userType.AddMemberName("Source");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  System.Uri
                userType = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_MapPage_ZoomLevel(object instance)
        {
            var that = (global::mobile_AppFilter.Views.MapPage)instance;
            return that.ZoomLevel;
        }
        private void set_0_MapPage_ZoomLevel(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Views.MapPage)instance;
            that.ZoomLevel = (global::System.Double)Value;
        }
        private object get_1_MapPage_Center(object instance)
        {
            var that = (global::mobile_AppFilter.Views.MapPage)instance;
            return that.Center;
        }
        private void set_1_MapPage_Center(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Views.MapPage)instance;
            that.Center = (global::Windows.Devices.Geolocation.Geopoint)Value;
        }
        private object get_2_MasterDetailDetailControl_MasterMenuItem(object instance)
        {
            var that = (global::mobile_AppFilter.Views.MasterDetailDetailControl)instance;
            return that.MasterMenuItem;
        }
        private void set_2_MasterDetailDetailControl_MasterMenuItem(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Views.MasterDetailDetailControl)instance;
            that.MasterMenuItem = (global::mobile_AppFilter.Models.SampleModel)Value;
        }
        private object get_3_MasterDetailDetailPage_Item(object instance)
        {
            var that = (global::mobile_AppFilter.Views.MasterDetailDetailPage)instance;
            return that.Item;
        }
        private void set_3_MasterDetailDetailPage_Item(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Views.MasterDetailDetailPage)instance;
            that.Item = (global::mobile_AppFilter.Models.SampleModel)Value;
        }
        private object get_4_MasterDetailPage_Selected(object instance)
        {
            var that = (global::mobile_AppFilter.Views.MasterDetailPage)instance;
            return that.Selected;
        }
        private void set_4_MasterDetailPage_Selected(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Views.MasterDetailPage)instance;
            that.Selected = (global::mobile_AppFilter.Models.SampleModel)Value;
        }
        private object get_5_MasterDetailPage_SampleItems(object instance)
        {
            var that = (global::mobile_AppFilter.Views.MasterDetailPage)instance;
            return that.SampleItems;
        }
        private object get_6_SampleModel_Title(object instance)
        {
            var that = (global::mobile_AppFilter.Models.SampleModel)instance;
            return that.Title;
        }
        private void set_6_SampleModel_Title(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Models.SampleModel)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_7_SampleModel_Description(object instance)
        {
            var that = (global::mobile_AppFilter.Models.SampleModel)instance;
            return that.Description;
        }
        private void set_7_SampleModel_Description(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Models.SampleModel)instance;
            that.Description = (global::System.String)Value;
        }
        private object get_8_SampleModel_Symbol(object instance)
        {
            var that = (global::mobile_AppFilter.Models.SampleModel)instance;
            return that.Symbol;
        }
        private void set_8_SampleModel_Symbol(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Models.SampleModel)instance;
            that.Symbol = (global::Windows.UI.Xaml.Controls.Symbol)Value;
        }
        private object get_9_SampleModel_SymbolAsChar(object instance)
        {
            var that = (global::mobile_AppFilter.Models.SampleModel)instance;
            return that.SymbolAsChar;
        }
        private object get_10_SettingsPage_IsLightThemeEnabled(object instance)
        {
            var that = (global::mobile_AppFilter.Views.SettingsPage)instance;
            return that.IsLightThemeEnabled;
        }
        private void set_10_SettingsPage_IsLightThemeEnabled(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Views.SettingsPage)instance;
            that.IsLightThemeEnabled = (global::System.Boolean)Value;
        }
        private object get_11_SettingsPage_AppDescription(object instance)
        {
            var that = (global::mobile_AppFilter.Views.SettingsPage)instance;
            return that.AppDescription;
        }
        private void set_11_SettingsPage_AppDescription(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Views.SettingsPage)instance;
            that.AppDescription = (global::System.String)Value;
        }
        private object get_12_ShellPage_IsPaneOpen(object instance)
        {
            var that = (global::mobile_AppFilter.Views.ShellPage)instance;
            return that.IsPaneOpen;
        }
        private void set_12_ShellPage_IsPaneOpen(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Views.ShellPage)instance;
            that.IsPaneOpen = (global::System.Boolean)Value;
        }
        private object get_13_ShellPage_DisplayMode(object instance)
        {
            var that = (global::mobile_AppFilter.Views.ShellPage)instance;
            return that.DisplayMode;
        }
        private void set_13_ShellPage_DisplayMode(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Views.ShellPage)instance;
            that.DisplayMode = (global::Windows.UI.Xaml.Controls.SplitViewDisplayMode)Value;
        }
        private object get_14_ShellPage_PrimaryItems(object instance)
        {
            var that = (global::mobile_AppFilter.Views.ShellPage)instance;
            return that.PrimaryItems;
        }
        private void set_14_ShellPage_PrimaryItems(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Views.ShellPage)instance;
            that.PrimaryItems = (global::System.Collections.ObjectModel.ObservableCollection<global::mobile_AppFilter.Views.ShellNavigationItem>)Value;
        }
        private object get_15_ShellNavigationItem_SelectedVis(object instance)
        {
            var that = (global::mobile_AppFilter.Views.ShellNavigationItem)instance;
            return that.SelectedVis;
        }
        private void set_15_ShellNavigationItem_SelectedVis(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Views.ShellNavigationItem)instance;
            that.SelectedVis = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_16_ShellNavigationItem_Label(object instance)
        {
            var that = (global::mobile_AppFilter.Views.ShellNavigationItem)instance;
            return that.Label;
        }
        private void set_16_ShellNavigationItem_Label(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Views.ShellNavigationItem)instance;
            that.Label = (global::System.String)Value;
        }
        private object get_17_ShellNavigationItem_Symbol(object instance)
        {
            var that = (global::mobile_AppFilter.Views.ShellNavigationItem)instance;
            return that.Symbol;
        }
        private void set_17_ShellNavigationItem_Symbol(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Views.ShellNavigationItem)instance;
            that.Symbol = (global::Windows.UI.Xaml.Controls.Symbol)Value;
        }
        private object get_18_ShellNavigationItem_SymbolAsChar(object instance)
        {
            var that = (global::mobile_AppFilter.Views.ShellNavigationItem)instance;
            return that.SymbolAsChar;
        }
        private object get_19_ShellNavigationItem_PageType(object instance)
        {
            var that = (global::mobile_AppFilter.Views.ShellNavigationItem)instance;
            return that.PageType;
        }
        private void set_19_ShellNavigationItem_PageType(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Views.ShellNavigationItem)instance;
            that.PageType = (global::System.Type)Value;
        }
        private object get_20_ShellNavigationItem_IsSelected(object instance)
        {
            var that = (global::mobile_AppFilter.Views.ShellNavigationItem)instance;
            return that.IsSelected;
        }
        private void set_20_ShellNavigationItem_IsSelected(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Views.ShellNavigationItem)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_21_ShellNavigationItem_SelectedForeground(object instance)
        {
            var that = (global::mobile_AppFilter.Views.ShellNavigationItem)instance;
            return that.SelectedForeground;
        }
        private void set_21_ShellNavigationItem_SelectedForeground(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Views.ShellNavigationItem)instance;
            that.SelectedForeground = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_22_ShellPage_SecondaryItems(object instance)
        {
            var that = (global::mobile_AppFilter.Views.ShellPage)instance;
            return that.SecondaryItems;
        }
        private void set_22_ShellPage_SecondaryItems(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Views.ShellPage)instance;
            that.SecondaryItems = (global::System.Collections.ObjectModel.ObservableCollection<global::mobile_AppFilter.Views.ShellNavigationItem>)Value;
        }
        private object get_23_WebViewPage_Source(object instance)
        {
            var that = (global::mobile_AppFilter.Views.WebViewPage)instance;
            return that.Source;
        }
        private void set_23_WebViewPage_Source(object instance, object Value)
        {
            var that = (global::mobile_AppFilter.Views.WebViewPage)instance;
            that.Source = (global::System.Uri)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember xamlMember = null;
            global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "mobile_AppFilter.Views.MapPage.ZoomLevel":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.MapPage");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "ZoomLevel", "Double");
                xamlMember.Getter = get_0_MapPage_ZoomLevel;
                xamlMember.Setter = set_0_MapPage_ZoomLevel;
                break;
            case "mobile_AppFilter.Views.MapPage.Center":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.MapPage");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "Center", "Windows.Devices.Geolocation.Geopoint");
                xamlMember.Getter = get_1_MapPage_Center;
                xamlMember.Setter = set_1_MapPage_Center;
                break;
            case "mobile_AppFilter.Views.MasterDetailDetailControl.MasterMenuItem":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.MasterDetailDetailControl");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "MasterMenuItem", "mobile_AppFilter.Models.SampleModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_MasterDetailDetailControl_MasterMenuItem;
                xamlMember.Setter = set_2_MasterDetailDetailControl_MasterMenuItem;
                break;
            case "mobile_AppFilter.Views.MasterDetailDetailPage.Item":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.MasterDetailDetailPage");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "Item", "mobile_AppFilter.Models.SampleModel");
                xamlMember.Getter = get_3_MasterDetailDetailPage_Item;
                xamlMember.Setter = set_3_MasterDetailDetailPage_Item;
                break;
            case "mobile_AppFilter.Views.MasterDetailPage.Selected":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.MasterDetailPage");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "Selected", "mobile_AppFilter.Models.SampleModel");
                xamlMember.Getter = get_4_MasterDetailPage_Selected;
                xamlMember.Setter = set_4_MasterDetailPage_Selected;
                break;
            case "mobile_AppFilter.Views.MasterDetailPage.SampleItems":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.MasterDetailPage");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "SampleItems", "System.Collections.ObjectModel.ObservableCollection`1<mobile_AppFilter.Models.SampleModel>");
                xamlMember.Getter = get_5_MasterDetailPage_SampleItems;
                xamlMember.SetIsReadOnly();
                break;
            case "mobile_AppFilter.Models.SampleModel.Title":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Models.SampleModel");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_6_SampleModel_Title;
                xamlMember.Setter = set_6_SampleModel_Title;
                break;
            case "mobile_AppFilter.Models.SampleModel.Description":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Models.SampleModel");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "Description", "String");
                xamlMember.Getter = get_7_SampleModel_Description;
                xamlMember.Setter = set_7_SampleModel_Description;
                break;
            case "mobile_AppFilter.Models.SampleModel.Symbol":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Models.SampleModel");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "Symbol", "Windows.UI.Xaml.Controls.Symbol");
                xamlMember.Getter = get_8_SampleModel_Symbol;
                xamlMember.Setter = set_8_SampleModel_Symbol;
                break;
            case "mobile_AppFilter.Models.SampleModel.SymbolAsChar":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Models.SampleModel");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "SymbolAsChar", "Char");
                xamlMember.Getter = get_9_SampleModel_SymbolAsChar;
                xamlMember.SetIsReadOnly();
                break;
            case "mobile_AppFilter.Views.SettingsPage.IsLightThemeEnabled":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.SettingsPage");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "IsLightThemeEnabled", "Boolean");
                xamlMember.Getter = get_10_SettingsPage_IsLightThemeEnabled;
                xamlMember.Setter = set_10_SettingsPage_IsLightThemeEnabled;
                break;
            case "mobile_AppFilter.Views.SettingsPage.AppDescription":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.SettingsPage");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "AppDescription", "String");
                xamlMember.Getter = get_11_SettingsPage_AppDescription;
                xamlMember.Setter = set_11_SettingsPage_AppDescription;
                break;
            case "mobile_AppFilter.Views.ShellPage.IsPaneOpen":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.ShellPage");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "IsPaneOpen", "Boolean");
                xamlMember.Getter = get_12_ShellPage_IsPaneOpen;
                xamlMember.Setter = set_12_ShellPage_IsPaneOpen;
                break;
            case "mobile_AppFilter.Views.ShellPage.DisplayMode":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.ShellPage");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "DisplayMode", "Windows.UI.Xaml.Controls.SplitViewDisplayMode");
                xamlMember.Getter = get_13_ShellPage_DisplayMode;
                xamlMember.Setter = set_13_ShellPage_DisplayMode;
                break;
            case "mobile_AppFilter.Views.ShellPage.PrimaryItems":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.ShellPage");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "PrimaryItems", "System.Collections.ObjectModel.ObservableCollection`1<mobile_AppFilter.Views.ShellNavigationItem>");
                xamlMember.Getter = get_14_ShellPage_PrimaryItems;
                xamlMember.Setter = set_14_ShellPage_PrimaryItems;
                break;
            case "mobile_AppFilter.Views.ShellNavigationItem.SelectedVis":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.ShellNavigationItem");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "SelectedVis", "Windows.UI.Xaml.Visibility");
                xamlMember.Getter = get_15_ShellNavigationItem_SelectedVis;
                xamlMember.Setter = set_15_ShellNavigationItem_SelectedVis;
                break;
            case "mobile_AppFilter.Views.ShellNavigationItem.Label":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.ShellNavigationItem");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "Label", "String");
                xamlMember.Getter = get_16_ShellNavigationItem_Label;
                xamlMember.Setter = set_16_ShellNavigationItem_Label;
                break;
            case "mobile_AppFilter.Views.ShellNavigationItem.Symbol":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.ShellNavigationItem");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "Symbol", "Windows.UI.Xaml.Controls.Symbol");
                xamlMember.Getter = get_17_ShellNavigationItem_Symbol;
                xamlMember.Setter = set_17_ShellNavigationItem_Symbol;
                break;
            case "mobile_AppFilter.Views.ShellNavigationItem.SymbolAsChar":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.ShellNavigationItem");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "SymbolAsChar", "Char");
                xamlMember.Getter = get_18_ShellNavigationItem_SymbolAsChar;
                xamlMember.SetIsReadOnly();
                break;
            case "mobile_AppFilter.Views.ShellNavigationItem.PageType":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.ShellNavigationItem");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "PageType", "System.Type");
                xamlMember.Getter = get_19_ShellNavigationItem_PageType;
                xamlMember.Setter = set_19_ShellNavigationItem_PageType;
                break;
            case "mobile_AppFilter.Views.ShellNavigationItem.IsSelected":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.ShellNavigationItem");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.Getter = get_20_ShellNavigationItem_IsSelected;
                xamlMember.Setter = set_20_ShellNavigationItem_IsSelected;
                break;
            case "mobile_AppFilter.Views.ShellNavigationItem.SelectedForeground":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.ShellNavigationItem");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "SelectedForeground", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.Getter = get_21_ShellNavigationItem_SelectedForeground;
                xamlMember.Setter = set_21_ShellNavigationItem_SelectedForeground;
                break;
            case "mobile_AppFilter.Views.ShellPage.SecondaryItems":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.ShellPage");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "SecondaryItems", "System.Collections.ObjectModel.ObservableCollection`1<mobile_AppFilter.Views.ShellNavigationItem>");
                xamlMember.Getter = get_22_ShellPage_SecondaryItems;
                xamlMember.Setter = set_22_ShellPage_SecondaryItems;
                break;
            case "mobile_AppFilter.Views.WebViewPage.Source":
                userType = (global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mobile_AppFilter.Views.WebViewPage");
                xamlMember = new global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlMember(this, "Source", "System.Uri");
                xamlMember.Getter = get_23_WebViewPage_Source;
                xamlMember.Setter = set_23_WebViewPage_Source;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlSystemBaseType
    {
        global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::mobile_AppFilter.mobile_AppFilter_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

